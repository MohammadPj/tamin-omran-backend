
{"level":"info","message":"Connected to MongoDB..."}
{"level":"error","message":"Could not get genre Could not get genre","stack":"Error: Could not get genre\n    at F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\src\\routes\\Category.ts:10:9\n    at Generator.next (<anonymous>)\n    at F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\src\\routes\\Category.ts:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\src\\routes\\Category.ts:4:12)\n    at F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\src\\routes\\Category.ts:9:36\n    at newFn (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express-async-errors\\index.js:16:20)\n    at Layer.handle [as handle_request] (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\route.js:144:13)\n    at Route.dispatch (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\route.js:114:3)\n    at newFn (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express-async-errors\\index.js:16:20)\n    at Layer.handle [as handle_request] (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\index.js:175:3)"}
{"level":"error","message":"Could not get genre Could not get genre","stack":"Error: Could not get genre\n    at F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\src\\routes\\Category.ts:10:9\n    at Generator.next (<anonymous>)\n    at F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\src\\routes\\Category.ts:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\src\\routes\\Category.ts:4:12)\n    at F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\src\\routes\\Category.ts:9:36\n    at newFn (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express-async-errors\\index.js:16:20)\n    at Layer.handle [as handle_request] (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\route.js:144:13)\n    at Route.dispatch (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\route.js:114:3)\n    at newFn (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express-async-errors\\index.js:16:20)\n    at Layer.handle [as handle_request] (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\index.js:175:3)"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"error","message":"Could not get genre Could not get genre","stack":"Error: Could not get genre\n    at F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\src\\routes\\Category.ts:10:9\n    at Generator.next (<anonymous>)\n    at F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\src\\routes\\Category.ts:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\src\\routes\\Category.ts:4:12)\n    at F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\src\\routes\\Category.ts:9:36\n    at newFn (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express-async-errors\\index.js:16:20)\n    at Layer.handle [as handle_request] (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\route.js:144:13)\n    at Route.dispatch (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\route.js:114:3)\n    at newFn (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express-async-errors\\index.js:16:20)\n    at Layer.handle [as handle_request] (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\index.js:346:12)\n    at next (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\index.js:280:10)\n    at Function.handle (F:\\Developer\\Code\\Practice\\Back End\\Node.js\\Mosh\\10-1-Authentication\\node_modules\\express\\lib\\router\\index.js:175:3)"}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"error","message":"connect ECONNREFUSED 127.0.0.1:27017 connect ECONNREFUSED 127.0.0.1:27017","reason":{"commonWireVersion":0,"compatible":true,"heartbeatFrequencyMS":10000,"localThresholdMS":15,"logicalSessionTimeoutMinutes":null,"maxElectionId":null,"maxSetVersion":null,"servers":{},"setName":null,"stale":false,"type":"Unknown"},"stack":"MongooseServerSelectionError: connect ECONNREFUSED 127.0.0.1:27017\n    at NativeConnection.Connection.openUri (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\connection.js:825:32)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\index.js:419:10\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\helpers\\promiseOrCallback.js:41:5\n    at new Promise (<anonymous>)\n    at promiseOrCallback (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\helpers\\promiseOrCallback.js:40:10)\n    at Mongoose._promiseOrCallback (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\index.js:1272:10)\n    at Mongoose.connect (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\index.js:418:20)\n    at module.exports (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\src\\startup\\db.ts:6:6)\n    at Object.<anonymous> (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\src\\index.ts:7:24)\n    at Module._compile (node:internal/modules/cjs/loader:1256:14)\n    at Module._compile (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\source-map-support\\source-map-support.js:568:25)\n    at Module.m._compile (C:\\Users\\Mohammad\\AppData\\Local\\Temp\\ts-node-dev-hook-5898175171017033.js:69:33)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1310:10)\n    at require.extensions..jsx.require.extensions..js (C:\\Users\\Mohammad\\AppData\\Local\\Temp\\ts-node-dev-hook-5898175171017033.js:114:20)\n    at require.extensions.<computed> (C:\\Users\\Mohammad\\AppData\\Local\\Temp\\ts-node-dev-hook-5898175171017033.js:71:20)\n    at Object.nodeDevHook [as .ts] (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\ts-node-dev\\lib\\hook.js:63:13)"}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"error","message":"Cannot apply rules to empty ruleset Cannot apply rules to empty ruleset","stack":"Error: Cannot apply rules to empty ruleset\n    at new module.exports (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\@hapi\\hoek\\lib\\error.js:23:19)\n    at module.exports (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\@hapi\\hoek\\lib\\assert.js:21:11)\n    at internals.Base.rule (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\joi\\lib\\base.js:481:9)\n    at internals.Base.method [as message] (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\joi\\lib\\extend.js:145:29)\n    at validateUser (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\src\\models\\User.ts:35:81)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\src\\routes\\register.ts:10:33\n    at Generator.next (<anonymous>)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\src\\routes\\register.ts:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\src\\routes\\register.ts:4:12)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\src\\routes\\register.ts:9:37\n    at newFn (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express-async-errors\\index.js:16:20)\n    at Layer.handle [as handle_request] (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express\\lib\\router\\route.js:144:13)\n    at Route.dispatch (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express\\lib\\router\\route.js:114:3)\n    at newFn (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express-async-errors\\index.js:16:20)"}
{"level":"error","message":"Cannot apply rules to empty ruleset Cannot apply rules to empty ruleset","stack":"Error: Cannot apply rules to empty ruleset\n    at new module.exports (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\@hapi\\hoek\\lib\\error.js:23:19)\n    at module.exports (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\@hapi\\hoek\\lib\\assert.js:21:11)\n    at internals.Base.rule (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\joi\\lib\\base.js:481:9)\n    at internals.Base.method [as message] (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\joi\\lib\\extend.js:145:29)\n    at validateUser (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\src\\models\\User.ts:35:81)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\src\\routes\\register.ts:10:33\n    at Generator.next (<anonymous>)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\src\\routes\\register.ts:8:71\n    at new Promise (<anonymous>)\n    at __awaiter (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\src\\routes\\register.ts:4:12)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\src\\routes\\register.ts:9:37\n    at newFn (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express-async-errors\\index.js:16:20)\n    at Layer.handle [as handle_request] (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express\\lib\\router\\route.js:144:13)\n    at Route.dispatch (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express\\lib\\router\\route.js:114:3)\n    at newFn (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express-async-errors\\index.js:16:20)"}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"_message":"Category validation failed","errors":{"lang":{"kind":"required","message":"Path `lang` is required.","name":"ValidatorError","path":"lang","properties":{"message":"Path `lang` is required.","path":"lang","type":"required"}}},"level":"error","message":"Category validation failed: lang: Path `lang` is required. Category validation failed: lang: Path `lang` is required.","stack":"ValidationError: Category validation failed: lang: Path `lang` is required.\n    at model.Document.invalidate (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:3123:32)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:2911:17\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\schematype.js:1349:9\n    at processTicksAndRejections (node:internal/process/task_queues:77:11)"}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"_message":"Category validation failed","errors":{"lang":{"kind":"required","message":"Path `lang` is required.","name":"ValidatorError","path":"lang","properties":{"message":"Path `lang` is required.","path":"lang","type":"required"}}},"level":"error","message":"Category validation failed: lang: Path `lang` is required. Category validation failed: lang: Path `lang` is required.","stack":"ValidationError: Category validation failed: lang: Path `lang` is required.\n    at model.Document.invalidate (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:3123:32)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:2911:17\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\schematype.js:1349:9\n    at processTicksAndRejections (node:internal/process/task_queues:77:11)"}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"_message":"Category validation failed","errors":{"lang":{"kind":"required","message":"Path `lang` is required.","name":"ValidatorError","path":"lang","properties":{"message":"Path `lang` is required.","path":"lang","type":"required"}}},"level":"error","message":"Category validation failed: lang: Path `lang` is required. Category validation failed: lang: Path `lang` is required.","stack":"ValidationError: Category validation failed: lang: Path `lang` is required.\n    at model.Document.invalidate (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:3123:32)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:2911:17\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\schematype.js:1349:9\n    at processTicksAndRejections (node:internal/process/task_queues:77:11)"}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"_message":"Category validation failed","errors":{"lang":{"kind":"required","message":"Path `lang` is required.","name":"ValidatorError","path":"lang","properties":{"message":"Path `lang` is required.","path":"lang","type":"required"}}},"level":"error","message":"Category validation failed: lang: Path `lang` is required. Category validation failed: lang: Path `lang` is required.","stack":"ValidationError: Category validation failed: lang: Path `lang` is required.\n    at model.Document.invalidate (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:3123:32)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:2911:17\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\schematype.js:1349:9\n    at processTicksAndRejections (node:internal/process/task_queues:77:11)"}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"_message":"Category validation failed","errors":{"lang":{"kind":"required","message":"Path `lang` is required.","name":"ValidatorError","path":"lang","properties":{"message":"Path `lang` is required.","path":"lang","type":"required"}}},"level":"error","message":"Category validation failed: lang: Path `lang` is required. Category validation failed: lang: Path `lang` is required.","stack":"ValidationError: Category validation failed: lang: Path `lang` is required.\n    at model.Document.invalidate (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:3123:32)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:2911:17\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\schematype.js:1349:9\n    at processTicksAndRejections (node:internal/process/task_queues:77:11)"}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"_message":"Category validation failed","errors":{"lang":{"kind":"required","message":"Path `lang` is required.","name":"ValidatorError","path":"lang","properties":{"message":"Path `lang` is required.","path":"lang","type":"required"}}},"level":"error","message":"Category validation failed: lang: Path `lang` is required. Category validation failed: lang: Path `lang` is required.","stack":"ValidationError: Category validation failed: lang: Path `lang` is required.\n    at model.Document.invalidate (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:3123:32)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:2911:17\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\schematype.js:1349:9\n    at processTicksAndRejections (node:internal/process/task_queues:77:11)"}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"_message":"Category validation failed","errors":{"lang":{"kind":"required","message":"Path `lang` is required.","name":"ValidatorError","path":"lang","properties":{"message":"Path `lang` is required.","path":"lang","type":"required"}}},"level":"error","message":"Category validation failed: lang: Path `lang` is required. Category validation failed: lang: Path `lang` is required.","stack":"ValidationError: Category validation failed: lang: Path `lang` is required.\n    at model.Document.invalidate (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:3123:32)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:2911:17\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\schematype.js:1349:9\n    at processTicksAndRejections (node:internal/process/task_queues:77:11)"}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"_message":"Category validation failed","errors":{"lang":{"kind":"required","message":"Path `lang` is required.","name":"ValidatorError","path":"lang","properties":{"message":"Path `lang` is required.","path":"lang","type":"required"}}},"level":"error","message":"Category validation failed: lang: Path `lang` is required. Category validation failed: lang: Path `lang` is required.","stack":"ValidationError: Category validation failed: lang: Path `lang` is required.\n    at model.Document.invalidate (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:3123:32)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:2911:17\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\schematype.js:1349:9\n    at processTicksAndRejections (node:internal/process/task_queues:77:11)"}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"_message":"Category validation failed","errors":{"lang":{"kind":"required","message":"Path `lang` is required.","name":"ValidatorError","path":"lang","properties":{"message":"Path `lang` is required.","path":"lang","type":"required"}}},"level":"error","message":"Category validation failed: lang: Path `lang` is required. Category validation failed: lang: Path `lang` is required.","stack":"ValidationError: Category validation failed: lang: Path `lang` is required.\n    at model.Document.invalidate (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:3123:32)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:2911:17\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\schematype.js:1349:9\n    at processTicksAndRejections (node:internal/process/task_queues:77:11)"}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"_message":"Category validation failed","errors":{"lang":{"kind":"enum","message":"`ee` is not a valid enum value for path `lang`.","name":"ValidatorError","path":"lang","properties":{"enumValues":["en","fa"],"message":"`ee` is not a valid enum value for path `lang`.","path":"lang","type":"enum","value":"ee"},"value":"ee"}},"level":"error","message":"Category validation failed: lang: `ee` is not a valid enum value for path `lang`. Category validation failed: lang: `ee` is not a valid enum value for path `lang`.","stack":"ValidationError: Category validation failed: lang: `ee` is not a valid enum value for path `lang`.\n    at model.Document.invalidate (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:3123:32)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:2911:17\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\schematype.js:1349:9\n    at processTicksAndRejections (node:internal/process/task_queues:77:11)"}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"_message":"Category validation failed","errors":{"lang":{"kind":"enum","message":"`fas` is not a valid enum value for path `lang`.","name":"ValidatorError","path":"lang","properties":{"enumValues":["en","fa"],"message":"`fas` is not a valid enum value for path `lang`.","path":"lang","type":"enum","value":"fas"},"value":"fas"}},"level":"error","message":"Category validation failed: lang: `fas` is not a valid enum value for path `lang`. Category validation failed: lang: `fas` is not a valid enum value for path `lang`.","stack":"ValidationError: Category validation failed: lang: `fas` is not a valid enum value for path `lang`.\n    at model.Document.invalidate (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:3123:32)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\document.js:2911:17\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\mongoose\\lib\\schematype.js:1349:9\n    at processTicksAndRejections (node:internal/process/task_queues:77:11)"}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"code":"ERR_HTTP_HEADERS_SENT","level":"error","message":"Cannot set headers after they are sent to the client Cannot set headers after they are sent to the client","stack":"Error: Cannot set headers after they are sent to the client\n    at new NodeError (node:internal/errors:405:5)\n    at ServerResponse.setHeader (node:_http_outgoing:648:11)\n    at ServerResponse.header (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express\\lib\\response.js:794:10)\n    at ServerResponse.send (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express\\lib\\response.js:174:12)\n    at ServerResponse.json (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express\\lib\\response.js:278:15)\n    at ServerResponse.send (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express\\lib\\response.js:162:21)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\src\\routes\\category.ts:35:7\n    at Generator.next (<anonymous>)\n    at fulfilled (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\src\\routes\\category.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"code":"ERR_HTTP_HEADERS_SENT","level":"error","message":"Cannot set headers after they are sent to the client Cannot set headers after they are sent to the client","stack":"Error: Cannot set headers after they are sent to the client\n    at new NodeError (node:internal/errors:405:5)\n    at ServerResponse.setHeader (node:_http_outgoing:648:11)\n    at ServerResponse.header (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express\\lib\\response.js:794:10)\n    at ServerResponse.send (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express\\lib\\response.js:174:12)\n    at ServerResponse.json (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express\\lib\\response.js:278:15)\n    at ServerResponse.send (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\node_modules\\express\\lib\\response.js:162:21)\n    at F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\src\\routes\\brand.ts:35:7\n    at Generator.next (<anonymous>)\n    at fulfilled (F:\\Developer\\Code\\Projects\\tamin-omran\\back-end\\src\\routes\\brand.ts:5:58)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
{"level":"info","message":"listening to port 4000"}
{"level":"info","message":"Connected to MongoDB..."}
